"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var morseCode = {
    "a": "._", "b": "_...", "c": "_._.", "d": "_..",
    "e": ".", "f": ".._.", "g": "__.", "h": "....",
    "i": "..", "j": ".___", "k": "_._", "l": "._..",
    "m": "__", "n": "_.", "o": "___", "p": ".__.",
    "q": "__._", "r": "._.", "s": "...", "t": "_",
    "u": ".._", "v": "..._", "w": ".__", "x": "_.._",
    "y": "_.__", "z": "__..", " ": " ",
    "1": ".____", "2": "..___", "3": "...__", "4": "...._", "5": ".....",
    "6": "_....", "7": "__...", "8": "___..", "9": "____.", "0": "_____"
};
var MorseService = (function () {
    function MorseService() {
    }
    MorseService = __decorate([
        core_1.Injectable()
    ], MorseService);
    return MorseService;
}());
exports.MorseService = MorseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9yc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vcnNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsSUFBTSxTQUFTLEdBQUc7SUFDZCxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSztJQUMvQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUM5QyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUMvQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUM3QyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRztJQUM3QyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUNoRCxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFFbEMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTztJQUNwRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPO0NBQ3ZFLENBQUE7QUFHRDtJQUFBO0lBRUEsQ0FBQztJQUZZLFlBQVk7UUFEeEIsaUJBQVUsRUFBRTtPQUNBLFlBQVksQ0FFeEI7SUFBRCxtQkFBQztDQUFBLEFBRkQsSUFFQztBQUZZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBtb3JzZUNvZGUgPSB7XG4gICAgXCJhXCI6IFwiLl9cIiwgXCJiXCI6IFwiXy4uLlwiLCBcImNcIjogXCJfLl8uXCIsIFwiZFwiOiBcIl8uLlwiLFxuICAgIFwiZVwiOiBcIi5cIiwgXCJmXCI6IFwiLi5fLlwiLCBcImdcIjogXCJfXy5cIiwgXCJoXCI6IFwiLi4uLlwiLFxuICAgIFwiaVwiOiBcIi4uXCIsIFwialwiOiBcIi5fX19cIiwgXCJrXCI6IFwiXy5fXCIsIFwibFwiOiBcIi5fLi5cIixcbiAgICBcIm1cIjogXCJfX1wiLCBcIm5cIjogXCJfLlwiLCBcIm9cIjogXCJfX19cIiwgXCJwXCI6IFwiLl9fLlwiLFxuICAgIFwicVwiOiBcIl9fLl9cIiwgXCJyXCI6IFwiLl8uXCIsIFwic1wiOiBcIi4uLlwiLCBcInRcIjogXCJfXCIsXG4gICAgXCJ1XCI6IFwiLi5fXCIsIFwidlwiOiBcIi4uLl9cIiwgXCJ3XCI6IFwiLl9fXCIsIFwieFwiOiBcIl8uLl9cIixcbiAgICBcInlcIjogXCJfLl9fXCIsIFwielwiOiBcIl9fLi5cIiwgXCIgXCI6IFwiIFwiLFxuXG4gICAgXCIxXCI6IFwiLl9fX19cIiwgXCIyXCI6IFwiLi5fX19cIiwgXCIzXCI6IFwiLi4uX19cIiwgXCI0XCI6IFwiLi4uLl9cIiwgXCI1XCI6IFwiLi4uLi5cIixcbiAgICBcIjZcIjogXCJfLi4uLlwiLCBcIjdcIjogXCJfXy4uLlwiLCBcIjhcIjogXCJfX18uLlwiLCBcIjlcIjogXCJfX19fLlwiLCBcIjBcIjogXCJfX19fX1wiXG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb3JzZVNlcnZpY2Uge1xuXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8vIHB1YmxpYyB0cmFuc2xhdGUobXNnOiBzdHJpbmcpOiBzdHJpbmcge1xuLy8gICAgIHJldHVybiBtc2cuc3BsaXQoXCJcIilcbi8vICAgICAgICAgLm1hcChjaGFyID0+IG1vcnNlQ29kZVtjaGFyLnRvTG9jYWxlTG93ZXJDYXNlKCldKVxuLy8gICAgICAgICAuam9pbihcIiBcIik7XG4vLyB9XG5cbi8vIHB1YmxpYyBnZXRCaWdEYXRhKG1zZzogc3RyaW5nKTogQmlnRGF0YSB7XG4vLyAgICAgY29uc3QgY29kZSA9IHRoaXMudHJhbnNsYXRlKG1zZyk7XG4vLyAgICAgY29uc3QgcmVzID0ge307XG4vLyAgICAgY29uc3QgZG90U2VyaWVzOiBEYXRhUG9pbnRbXSA9IFt7IG5hbWU6IFwiMFwiLCB2YWx1ZTogMCB9XTtcbi8vICAgICBjb25zdCBkYXNoU2VyaWVzOiBEYXRhUG9pbnRbXSA9IFt7IG5hbWU6IFwiMFwiLCB2YWx1ZTogMCB9XTtcbi8vICAgICBsZXQgY291bnQgPSAxO1xuXG4vLyAgICAgY29kZS5zcGxpdCgnJykuZm9yRWFjaCgoY2hhciwgaSwgYXJyKSA9PiB7XG4vLyAgICAgICAgIHJlc1tjaGFyXSA9IHJlc1tjaGFyXSA/IHJlc1tjaGFyXSArIDEgOiAxO1xuLy8gICAgICAgICBpZiAoY2hhciA9PT0gXCIgXCIgfHwgaSA9PT0gKGFyci5sZW5ndGggLSAxKSkge1xuLy8gICAgICAgICAgICAgZG90U2VyaWVzLnB1c2goeyBuYW1lOiBjb3VudCArIFwiXCIsIHZhbHVlOiByZXNbXCIuXCJdIHx8IDAgfSk7XG4vLyAgICAgICAgICAgICBkYXNoU2VyaWVzLnB1c2goeyBuYW1lOiBjb3VudCArIFwiXCIsIHZhbHVlOiByZXNbXCJfXCJdIHx8IDAgfSk7XG4vLyAgICAgICAgICAgICBjb3VudCsrO1xuLy8gICAgICAgICB9XG4vLyAgICAgfSk7XG5cbi8vICAgICBjb25zdCBwaWVEYXRhID0gW1xuLy8gICAgICAgICB7IG5hbWU6IFwiZG90XCIsIHZhbHVlOiByZXNbXCIuXCJdIH0sXG4vLyAgICAgICAgIHsgbmFtZTogXCJkYXNoXCIsIHZhbHVlOiByZXNbXCJfXCJdIH0sXG4vLyAgICAgICAgIHsgbmFtZTogXCJzcGFjZVwiLCB2YWx1ZTogcmVzW1wiIFwiXSB9XG4vLyAgICAgXTtcblxuLy8gICAgIHJldHVybiB7IHBpZURhdGEsIGRvdFNlcmllcywgZGFzaFNlcmllcyB9O1xuLy8gfVxuXG5cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhUG9pbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpZ0RhdGEge1xuICAgIHBpZURhdGE6IERhdGFQb2ludFtdO1xuICAgIGRvdFNlcmllczogRGF0YVBvaW50W107XG4gICAgZGFzaFNlcmllczogRGF0YVBvaW50W107XG59XG5cbiJdfQ==
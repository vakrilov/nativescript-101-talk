"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var morseCode = {
    "a": "._", "b": "_...", "c": "_._.", "d": "_..",
    "e": ".", "f": ".._.", "g": "__.", "h": "....",
    "i": "..", "j": ".___", "k": "_._", "l": "._..",
    "m": "__", "n": "_.", "o": "___", "p": ".__.",
    "q": "__._", "r": "._.", "s": "...", "t": "_",
    "u": ".._", "v": "..._", "w": ".__", "x": "_.._",
    "y": "_.__", "z": "__..", " ": " ",
    "1": ".____", "2": "..___", "3": "...__", "4": "...._", "5": ".....",
    "6": "_....", "7": "__...", "8": "___..", "9": "____.", "0": "_____"
};
var MorseService = (function () {
    function MorseService() {
    }
    MorseService.prototype.translate = function (msg) {
        return msg.split("").reduce(function (prev, char) {
            return prev + morseCode[char.toLocaleLowerCase()] + " ";
        }, "");
    };
    MorseService.prototype.getBigData = function (msg) {
        var code = this.translate(msg);
        var res = {};
        var dotSeries = [];
        var dashSeries = [];
        var count = 1;
        code.split('').forEach(function (char) {
            res[char] = res[char] ? res[char] + 1 : 1;
            if (char === " ") {
                dotSeries.push({ name: count + "", value: res["."] || 0 });
                dashSeries.push({ name: count + "", value: res["_"] || 0 });
                count++;
            }
        });
        var pieData = [
            { name: "dot", value: res["."] },
            { name: "dash", value: res["_"] },
            { name: "space", value: res[" "] }
        ];
        return { pieData: pieData, dotSeries: dotSeries, dashSeries: dashSeries };
    };
    MorseService = __decorate([
        core_1.Injectable()
    ], MorseService);
    return MorseService;
}());
exports.MorseService = MorseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9yc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vcnNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsSUFBTSxTQUFTLEdBQUc7SUFDZCxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSztJQUMvQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUM5QyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUMvQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUM3QyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRztJQUM3QyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTTtJQUNoRCxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFFbEMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTztJQUNwRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPO0NBQ3ZFLENBQUE7QUFjRDtJQUFBO0lBK0JBLENBQUM7SUE5QlUsZ0NBQVMsR0FBaEIsVUFBaUIsR0FBVztRQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsSUFBSTtZQUM1QyxNQUFNLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBRSxHQUFHLEdBQUcsQ0FBQztRQUM5RCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU0saUNBQVUsR0FBakIsVUFBa0IsR0FBVztRQUN6QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksU0FBUyxHQUFnQixFQUFFLENBQUM7UUFDaEMsSUFBSSxVQUFVLEdBQWdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDdkIsR0FBRyxDQUFFLElBQUksQ0FBRSxHQUFHLEdBQUcsQ0FBRSxJQUFJLENBQUUsR0FBRyxHQUFHLENBQUUsSUFBSSxDQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDZixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM3RCxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RCxLQUFLLEVBQUUsQ0FBQztZQUNaLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQU0sT0FBTyxHQUFHO1lBQ1osRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEVBQUU7WUFDbEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEVBQUU7WUFDbkMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEVBQUU7U0FDdkMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLFNBQVMsV0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQTlCUSxZQUFZO1FBRHhCLGlCQUFVLEVBQUU7T0FDQSxZQUFZLENBK0J4QjtJQUFELG1CQUFDO0NBQUEsQUEvQkQsSUErQkM7QUEvQlksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IG1vcnNlQ29kZSA9IHtcbiAgICBcImFcIjogXCIuX1wiLCBcImJcIjogXCJfLi4uXCIsIFwiY1wiOiBcIl8uXy5cIiwgXCJkXCI6IFwiXy4uXCIsXG4gICAgXCJlXCI6IFwiLlwiLCBcImZcIjogXCIuLl8uXCIsIFwiZ1wiOiBcIl9fLlwiLCBcImhcIjogXCIuLi4uXCIsXG4gICAgXCJpXCI6IFwiLi5cIiwgXCJqXCI6IFwiLl9fX1wiLCBcImtcIjogXCJfLl9cIiwgXCJsXCI6IFwiLl8uLlwiLFxuICAgIFwibVwiOiBcIl9fXCIsIFwiblwiOiBcIl8uXCIsIFwib1wiOiBcIl9fX1wiLCBcInBcIjogXCIuX18uXCIsXG4gICAgXCJxXCI6IFwiX18uX1wiLCBcInJcIjogXCIuXy5cIiwgXCJzXCI6IFwiLi4uXCIsIFwidFwiOiBcIl9cIixcbiAgICBcInVcIjogXCIuLl9cIiwgXCJ2XCI6IFwiLi4uX1wiLCBcIndcIjogXCIuX19cIiwgXCJ4XCI6IFwiXy4uX1wiLFxuICAgIFwieVwiOiBcIl8uX19cIiwgXCJ6XCI6IFwiX18uLlwiLCBcIiBcIjogXCIgXCIsXG5cbiAgICBcIjFcIjogXCIuX19fX1wiLCBcIjJcIjogXCIuLl9fX1wiLCBcIjNcIjogXCIuLi5fX1wiLCBcIjRcIjogXCIuLi4uX1wiLCBcIjVcIjogXCIuLi4uLlwiLFxuICAgIFwiNlwiOiBcIl8uLi4uXCIsIFwiN1wiOiBcIl9fLi4uXCIsIFwiOFwiOiBcIl9fXy4uXCIsIFwiOVwiOiBcIl9fX18uXCIsIFwiMFwiOiBcIl9fX19fXCJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhUG9pbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpZ0RhdGEge1xuICAgIHBpZURhdGE6IERhdGFQb2ludFtdO1xuICAgIGRvdFNlcmllczogRGF0YVBvaW50W107XG4gICAgZGFzaFNlcmllczogRGF0YVBvaW50W107XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb3JzZVNlcnZpY2Uge1xuICAgIHB1YmxpYyB0cmFuc2xhdGUobXNnOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbXNnLnNwbGl0KFwiXCIpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2hhcikge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYgKyBtb3JzZUNvZGVbIGNoYXIudG9Mb2NhbGVMb3dlckNhc2UoKSBdICsgXCIgXCI7XG4gICAgICAgIH0sIFwiXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCaWdEYXRhKG1zZzogc3RyaW5nKTogQmlnRGF0YSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLnRyYW5zbGF0ZShtc2cpO1xuICAgICAgICBsZXQgcmVzID0ge307XG4gICAgICAgIGxldCBkb3RTZXJpZXM6IERhdGFQb2ludFtdID0gW107XG4gICAgICAgIGxldCBkYXNoU2VyaWVzOiBEYXRhUG9pbnRbXSA9IFtdO1xuICAgICAgICBsZXQgY291bnQgPSAxO1xuXG4gICAgICAgIGNvZGUuc3BsaXQoJycpLmZvckVhY2goY2hhciA9PiB7XG4gICAgICAgICAgICByZXNbIGNoYXIgXSA9IHJlc1sgY2hhciBdID8gcmVzWyBjaGFyIF0gKyAxIDogMTtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgIGRvdFNlcmllcy5wdXNoKHsgbmFtZTogY291bnQgKyBcIlwiLCB2YWx1ZTogcmVzWyBcIi5cIiBdIHx8IDAgfSk7XG4gICAgICAgICAgICAgICAgZGFzaFNlcmllcy5wdXNoKHsgbmFtZTogY291bnQgKyBcIlwiLCB2YWx1ZTogcmVzWyBcIl9cIiBdIHx8IDAgfSk7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcGllRGF0YSA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogXCJkb3RcIiwgdmFsdWU6IHJlc1sgXCIuXCIgXSB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcImRhc2hcIiwgdmFsdWU6IHJlc1sgXCJfXCIgXSB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcInNwYWNlXCIsIHZhbHVlOiByZXNbIFwiIFwiIF0gfVxuICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiB7IHBpZURhdGEsIGRvdFNlcmllcywgZGFzaFNlcmllcyB9O1xuICAgIH1cbn0iXX0=